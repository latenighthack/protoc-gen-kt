package {{ package . }}

import com.latenighthack.ktbuf.proto.GrpcService
import com.latenighthack.ktbuf.net.RpcClient
import kotlinx.coroutines.flow.Flow

{{- define "service" }}
interface {{ name . }}Service {
    companion object {
        val Descriptor = GrpcService.ServiceDescriptor(
            "{{ protoPackage . }}", "{{ name . }}", listOf(
                {{ range .Methods }}
                GrpcService.MethodDescriptor<{{ name .Input }}, {{ name .Output }}>(
                    "{{ originalName . }}",
                    {{ name .Input }}.Companion::readFrom,
                    {{ name .Output }}::writeTo,
                    {{ if .ClientStreaming }}true{{ else }}false{{ end }},
                    {{ if .ServerStreaming }}true{{ else }}false{{ end }}
                ),
                {{- end }}
            )
        )
    }
    {{ range .Methods }}
    {{ if .ServerStreaming }}{{ else }}suspend {{ end }}fun {{ name . }}(request: {{ if .ClientStreaming }}Flow<{{ name .Input }}>{{ else }}{{ name .Input }}{{- end }}): {{ if .ServerStreaming }}Flow<{{ name .Output }}>{{ else }}{{ name .Output }}{{- end }}
    {{- end }}
}

class {{ name . }}ServiceRpc(rpc: RpcClient): {{ name . }}Service, GrpcService(rpc, "{{ protoPackage . }}", "{{ name . }}") {
    {{- range .Methods }}
    override {{ if .ServerStreaming }}{{ else }}suspend {{ end }}fun {{ name . }}(request: {{ if .ClientStreaming }}Flow<{{ name .Input }}>{{ else }}{{ name .Input }}{{- end }}): {{ if .ServerStreaming }}Flow<{{ name .Output }}>{{ else }}{{ name .Output }}{{- end }} = client{{ if .ClientStreaming }}Stream{{ else }}Unary{{- end }}Server{{ if .ServerStreaming }}Stream{{ else }}Unary{{- end }}("{{ .Name }}", request, {{ name .Input }}::writeTo, {{ name .Output }}.Companion::readFrom)
    {{- end }}
}
{{- end }}
{{ range .Services }}{{ template "service" . }}{{ end -}}
